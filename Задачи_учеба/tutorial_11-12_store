using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

// Базовый класс товара
public abstract class Product
{
    protected string name;
    protected double price;
    protected int quantity;
    protected string category;

    public Product(string nm, double pr, int qt, string ct)
    {
        name = nm;
        price = pr;
        quantity = qt;
        category = ct;
    }

    // Виртуальные методы
    public abstract void DisplayInfo();
    public abstract void WriteToBinaryFile(BinaryWriter writer);
    public abstract void GetSpecificInfo();

    // Свойства и методы
    public string Name => name;
    public double Price => price;
    public int Quantity => quantity;
    public string Category => category;

    public void SetPrice(double price2)
    {
        price = price2;
    }

    public void SetQuantity(int quantity2)
    {
        quantity = quantity2;
    }

    public void AddQuantity(int amount)
    {
        quantity += amount;
    }

    public void DecreaseQuantity(int amount)
    {
        if (quantity >= amount)
        {
            quantity -= amount;
        }
        else
        {
            quantity = 0;
        }
    }

    public bool IsInStock()
    {
        return quantity > 0;
    }
}

// Класс для продуктов питания
public class Food : Product
{
    private string expirationDate;
    private double weight;

    public Food(string nm, double pr, int qt, string expDate, double weig) 
        : base(nm, pr, qt, "Food")
    {
        expirationDate = expDate;
        weight = weig;
    }

    public override void DisplayInfo()
    {
        Console.WriteLine($"Продукт питания: {name}");
        Console.WriteLine($"Цена: {price}");
        Console.WriteLine($"Количество: {quantity}");
        Console.WriteLine($"Срок годности: {expirationDate}");
        Console.WriteLine($"Вес: {weight}кг");
    }

    public override void WriteToBinaryFile(BinaryWriter writer)
    {
        writer.Write("Food");
        writer.Write(name);
        writer.Write(price);
        writer.Write(quantity);
        writer.Write(expirationDate);
        writer.Write(weight);
    }

    public override void GetSpecificInfo()
    {
        Console.WriteLine($"Срок годности: {expirationDate}, Вес: {weight}кг");
    }
}

// Класс для одежды
public class Clother : Product
{
    private string size;
    private string color;
    private string material;

    public Clother(string nm, double pr, int qt, string sz, string col, string mat)
        : base(nm, pr, qt, "Clothing")
    {
        size = sz;
        color = col;
        material = mat;
    }

    public override void DisplayInfo()
    {
        Console.WriteLine($"Одежда: {name}");
        Console.WriteLine($"Цена: {price}");
        Console.WriteLine($"Количество: {quantity}");
        Console.WriteLine($"Размер: {size}");
        Console.WriteLine($"Цвет: {color}");
        Console.WriteLine($"Материал: {material}");
    }

    public override void WriteToBinaryFile(BinaryWriter writer)
    {
        writer.Write("Clothing");
        writer.Write(name);
        writer.Write(price);
        writer.Write(quantity);
        writer.Write(size);
        writer.Write(color);
        writer.Write(material);
    }

    public override void GetSpecificInfo()
    {
        Console.WriteLine($"Размер: {size}, Цвет: {color}, Материал: {material}");
    }
}

// Класс магазина
public class Store
{
    private List<Product> products = new List<Product>();

    // Добавление товара
    public void AddProduct(Product product)
    {
        products.Add(product);
    }

    // Вывод всех товаров
    public void DisplayProducts()
    {
        Console.WriteLine("Все продукты в магазине:");
        foreach (var product in products)
        {
            product.DisplayInfo();
            Console.WriteLine();
        }
    }

    // Вывод товаров в наличии
    public void DisplayProductsInStock()
    {
        Console.WriteLine("Продукты в наличии:");
        foreach (var product in products)
        {
            if (product.IsInStock())
            {
                product.DisplayInfo();
                Console.WriteLine();
            }
        }
    }

    // Вывод отсутствующих товаров
    public void DisplayOutOfStockProducts()
    {
        Console.WriteLine("Продукты, которые отсутствуют:");
        foreach (var product in products)
        {
            if (!product.IsInStock())
            {
                product.DisplayInfo();
                Console.WriteLine();
            }
        }
    }

    // Сортировка по имени
    public void SortByName()
    {
        products = products.OrderBy(p => p.Name).ToList();
    }

    // Сортировка по цене
    public void SortByPrice()
    {
        products = products.OrderBy(p => p.Price).ToList();
    }

    // Сортировка по количеству
    public void SortByQuantity()
    {
        products = products.OrderBy(p => p.Quantity).ToList();
    }

    // Поиск товара по имени
    public Product FindProduct(string name)
    {
        return products.FirstOrDefault(p => p.Name == name);
    }

    // Изменение цены
    public void ChangePrice(string name, double newPrice)
    {
        Product product = FindProduct(name);
        if (product != null)
        {
            product.SetPrice(newPrice);
            Console.WriteLine("Стоимость была изменена");
        }
        else
        {
            Console.WriteLine("Стоимость не была изменена, товар не найден");
        }
    }

    // Сохранение в файл
    public void SaveToFile(string filename)
    {
        using (BinaryWriter writer = new BinaryWriter(File.Open(filename, FileMode.Create)))
        {
            foreach (var product in products)
            {
                product.WriteToBinaryFile(writer);
            }
        }
        Console.WriteLine("Товары сохранены");
    }

    // Загрузка из файла
    public void LoadFromFile(string filename)
    {
        products.Clear();
        
        using (BinaryReader reader = new BinaryReader(File.Open(filename, FileMode.Open)))
        {
            while (reader.BaseStream.Position != reader.BaseStream.Length)
            {
                string type = reader.ReadString();
                if (type == "Food")
                {
                    LoadFood(reader);
                }
                else if (type == "Clothing")
                {
                    LoadClothing(reader);
                }
            }
        }
        Console.WriteLine("Товары добавлены");
    }

    private void LoadFood(BinaryReader reader)
    {
        string name = reader.ReadString();
        double price = reader.ReadDouble();
        int quantity = reader.ReadInt32();
        string expirationDate = reader.ReadString();
        double weight = reader.ReadDouble();
        
        AddProduct(new Food(name, price, quantity, expirationDate, weight));
    }

    private void LoadClothing(BinaryReader reader)
    {
        string name = reader.ReadString();
        double price = reader.ReadDouble();
        int quantity = reader.ReadInt32();
        string size = reader.ReadString();
        string color = reader.ReadString();
        string material = reader.ReadString();
        
        AddProduct(new Clother(name, price, quantity, size, color, material));
    }
}

public class Program
{
    private static void DisplayMenu()
    {
        Console.WriteLine("1) Добавить новый товар");
        Console.WriteLine("2) Изменить цену товара");
        Console.WriteLine("3) Посмотреть все товары");
        Console.WriteLine("4) Посмотреть товары в наличии");
        Console.WriteLine("5) Посмотреть отсутствующие товары");
        Console.WriteLine("6) Сортировать товары");
        Console.WriteLine("7) Найти товар по имени");
        Console.WriteLine("8) Сохранить товары в файл");
        Console.WriteLine("9) Загрузить товары из файла");
        Console.WriteLine("0) Выход");
        Console.Write("Выберите действие: ");
    }

    private static void AddProductMenu(Store store)
    {
        Console.WriteLine("Выберите категорию товара:");
        Console.WriteLine("1) Продукты питания");
        Console.WriteLine("2) Одежда");
        Console.Write("Выберите категорию: ");

        int choice = int.Parse(Console.ReadLine());
        Console.ReadLine(); // Очистка буфера

        Console.Write("Введите название товара: ");
        string name = Console.ReadLine();
        Console.Write("Введите цену: ");
        double price = double.Parse(Console.ReadLine());
        Console.Write("Введите количество: ");
        int quantity = int.Parse(Console.ReadLine());
        Console.ReadLine(); // Очистка буфера

        switch (choice)
        {
            case 1:
                Console.Write("Введите срок годности: ");
                string expirationDate = Console.ReadLine();
                Console.Write("Введите вес (кг): ");
                double weight = double.Parse(Console.ReadLine());
                store.AddProduct(new Food(name, price, quantity, expirationDate, weight));
                break;
            case 2:
                Console.Write("Введите размер: ");
                string size = Console.ReadLine();
                Console.Write("Введите цвет: ");
                string color = Console.ReadLine();
                Console.Write("Введите материал: ");
                string material = Console.ReadLine();
                store.AddProduct(new Clother(name, price, quantity, size, color, material));
                break;
            default:
                Console.WriteLine("Неверный выбор");
                return;
        }
        Console.WriteLine("Товар успешно добавлен");
    }

    private static void SortProductsMenu(Store store)
    {
        Console.WriteLine("Сортировать по:");
        Console.WriteLine("1) Названию");
        Console.WriteLine("2) Цене");
        Console.WriteLine("3) Количеству");
        Console.Write("Выберите вариант: ");

        int choice = int.Parse(Console.ReadLine());
        
        switch (choice)
        {
            case 1:
                store.SortByName();
                break;
            case 2:
                store.SortByPrice();
                break;
            case 3:
                store.SortByQuantity();
                break;
            default:
                Console.WriteLine("Неверный выбор");
                return;
        }
        Console.WriteLine("Товары отсортированы");
    }

    public static void Main()
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8;
        Store store = new Store();
        int choice;
        string filename = "products.dat";
        
        do
        {
            DisplayMenu();
            choice = int.Parse(Console.ReadLine());
            Console.ReadLine(); // Очистка буфера
            
            switch (choice)
            {
                case 1:
                    AddProductMenu(store);
                    break;
                case 2:
                    Console.Write("Введите название товара: ");
                    string name = Console.ReadLine();
                    Console.Write("Введите новую цену: ");
                    double newPrice = double.Parse(Console.ReadLine());
                    store.ChangePrice(name, newPrice);
                    break;
                case 3:
                    store.DisplayProducts();
                    break;
                case 4:
                    store.DisplayProductsInStock();
                    break;
                case 5:
                    store.DisplayOutOfStockProducts();
                    break;
                case 6:
                    SortProductsMenu(store);
                    break;
                case 7:
                    Console.Write("Введите название товара: ");
                    string searchName = Console.ReadLine();
                    Product product = store.FindProduct(searchName);
                    if (product != null)
                    {
                        product.DisplayInfo();
                    }
                    else
                    {
                        Console.WriteLine("Товар не найден");
                    }
                    break;
                case 8:
                    store.SaveToFile(filename);
                    break;
                case 9:
                    store.LoadFromFile(filename);
                    break;
                case 0:
                    Console.WriteLine("Выход из программы");
                    break;
                default:
                    Console.WriteLine("Неверный выбор, попробуйте снова");
                    break;
            }
        } while (choice != 0);
    }
}
