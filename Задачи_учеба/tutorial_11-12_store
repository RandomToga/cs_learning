using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;


public abstract class Product
{
    //переменные
    protected int id;
    protected string name;
    protected double price;
    protected int quantity;

    public int Id => id;
    public string Name => name;
    public double Price => price;
    public int Quantity => quantity;
    
    //конструктор
    protected Product(int id, string name, double price, int quantity)
    {
        this.id = id;
        this.name = name;
        this.price = price;
        this.quantity = quantity;
    }
    //методы
    public virtual void DisplayInfo()
    {
        Console.WriteLine($"ID: {id}, Название: {name}, Цена: {price}, Количество: {quantity}");
    }

    public virtual void ChangePrice(double new_price)
    {
        price = new_price;
    }
}
public class Clothing : Product
{
    private string size;
    private string color;
    public string Size => size;
    public string Color => color;
    // конструктор
    public Clothing(int id, string name, double price, int quantity, string size, string color) : base(id, name, price, quantity)
    {
        this.size = size;
        this.color = color;
    }

    public override void DisplayInfo() //перегрузка базовой функии
    {
        base.DisplayInfo(); // Вызываем базовую версию
        Console.WriteLine($"Размер: {size}, Цвет: {color}");
    }
    public void ChangeSize(string newSize)
    {
        size = newSize;
    }
}
public class Shop
{
    private List<Product> products = new List<Product>();
    public void AddClothing()
    {
        Console.Write("ID: ");
        int id = int.Parse(Console.ReadLine());
        Console.Write("Название: ");
        string name = Console.ReadLine();
        Console.Write("Цена: ");
        double price = double.Parse(Console.ReadLine());
        Console.Write("Количество: ");
        int quantity = int.Parse(Console.ReadLine());
        Console.Write("Размер: ");
        string size = Console.ReadLine();
        Console.Write("Цвет: ");
        string color = Console.ReadLine();
        var clothing = new Clothing(id, name, price, quantity, size, color);
        products.Add(clothing);
    }
    public void DisplayAvailableProducts() //вывод списка товаров в наличии
    {
        List<Product> availableProducts = new List<Product>();
        foreach (var p in products)
        {
            if (p.Quantity > 0)
            {
                availableProducts.Add(p);
            }
        }
        if (availableProducts.Count == 0)
        {
            Console.WriteLine("Нет товаров в наличии.");
            return;
        }
        foreach (var product in availableProducts)
        {
            product.DisplayInfo();
        }
    }

    public void DisplayNotAvailableProducts() //вывод списка товаров вне наличия
    {
        Console.WriteLine("\nОтсутствующие товары:");
        List<Product> notAvailableProducts = new List<Product>();
        foreach (var p in products)
        {
            if (p.Quantity == 0)
            {
                notAvailableProducts.Add(p);
            }
        }
        if (notAvailableProducts.Count == 0)
        {
            Console.WriteLine("Все товары в наличии.");
            return;
        }
        foreach (var product in notAvailableProducts)
        {
            product.DisplayInfo();
        }
    }
    public void SearchAndSortProducts(string searchTerm) //поиск по названию
    {
        // фильтрация по названию
        if (!string.IsNullOrEmpty(searchTerm))
        {
            foreach (var p in products)
            {
                if (p.Name.ToLower().Contains(searchTerm.ToLower()))
                {
                    p.DisplayInfo();
                }
            }
        }
        else
        {
            Console.WriteLine("Название нне найдено");
        }
    }
    public void SortProducts(string sortBy = "name") //сортировка
    {
        List<Product> filteredProducts = new List<Product>();
        switch (sortBy.ToLower())
        {
            case "название":
                filteredProducts = products.OrderBy(p => p.Name).ToList();
                break;
            case "цена":
                filteredProducts = products.OrderBy(p => p.Price).ToList();
                break;
            case "количество":
                filteredProducts = products.OrderBy(p => p.Quantity).ToList();
                break;
            default:
                filteredProducts = products.OrderBy(p => p.Name).ToList();
                break;
        }
        foreach (var product in filteredProducts)
        {
            product.DisplayInfo();
        }
    }
    public void SaveToBinaryFile()
    {
        string path = "default_data.bin";
        try
        {
            using (var stream = File.Open(path, FileMode.Create))
            using (var writer = new BinaryWriter(stream))
            {
                writer.Write(products.Count); // Записываем количество товаров

                foreach (var product in products)
                {
                    writer.Write(product.GetType().Name); // Записываем тип товара

                    // Записываем общие свойства
                    writer.Write(product.Id);
                    writer.Write(product.Name);
                    writer.Write(product.Price);
                    writer.Write(product.Quantity);

                    // Записываем специфичные свойства
                    if (product is Clothing clothing)
                    {
                        writer.Write(clothing.Size);
                        writer.Write(clothing.Color);
                    }
                    // Здесь можно добавить другие типы продуктов
                }
            }
            Console.WriteLine($"Данные успешно сохранены в файл: {path}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при сохранении: {ex.Message}");
        }
    }

    public void LoadFromBinaryFile()
    {
        string path = "default_data.bin";
        try
        {
            var loadedProducts = new List<Product>(); //вектор куда загружаем продукты

            using (var stream = File.Open(path, FileMode.Open))
            using (var reader = new BinaryReader(stream))
            {
                int count = reader.ReadInt32(); // Читаем количество товаров

                for (int i = 0; i < count; i++)
                {
                    string typeName = reader.ReadString(); // Тип продукта

                    // Общие свойства
                    int id = reader.ReadInt32();
                    string name = reader.ReadString();
                    double price = reader.ReadDouble();
                    int quantity = reader.ReadInt32();

                    Product? product = null;

                    switch (typeName)
                    {
                        case nameof(Clothing):
                            string size = reader.ReadString();
                            string color = reader.ReadString();
                            product = new Clothing(id, name, price, quantity, size, color);
                            break;
                    }

                    if (product != null)
                        loadedProducts.Add(product);
                }
            }

            products = loadedProducts;
            //nextId = products.Count > 0 ? products.Max(p => p.Id) + 1 : 1;

            Console.WriteLine($"Данные успешно загружены из файла: {path}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при загрузке: {ex.Message}");
        }
    }
}
class Program
{
    static void Main()
    {
        Shop shop = new Shop();
        bool exit = false;

        while (!exit)
        {
            Console.WriteLine("1. Добавить одежду");
            Console.WriteLine("2. Показать товары в наличии");
            Console.WriteLine("3. Показать отсутствующие товары");
            Console.WriteLine("4. Поиск по названию");
            Console.WriteLine("5. Сортировка товаров");
            Console.WriteLine("6. Сохранить в файл");
            Console.WriteLine("7. Загрузить из файла");
            Console.WriteLine("0. Выход");
            Console.Write("Выберите действие: ");

            string input = Console.ReadLine();

            switch (input)
            {
                case "1":
                    shop.AddClothing();
                    Console.WriteLine("Одежда добавлена.");
                    break;
                case "2":
                    shop.DisplayAvailableProducts();
                    break;
                case "3":
                    shop.DisplayNotAvailableProducts();
                    break;
                case "4":
                    Console.Write("Введите строку для поиска: ");
                    shop.SearchAndSortProducts(Console.ReadLine());
                    break;
                case "5":
                    Console.Write("Сортировать по (название / цена / количество): ");
                    string sortBy = Console.ReadLine();
                    shop.SortProducts(sortBy);
                    break;
                case "6":
                    shop.SaveToBinaryFile();
                    break;
                case "7":
                    shop.LoadFromBinaryFile();
                    break;
                case "0":
                    exit = true;
                    break;
                default:
                    Console.WriteLine("Неверный выбор. Попробуйте снова.");
                    break;
            }
        }
    }
}
