/* Курс https://stepik.org/course/121995/syllabus

Содержание:
1.2 Чуть-чуть инфы о языке
2. Вступительный тест
3. Теория C#
3.1 О.NET Framework, жизненный цил кода C#
3.2 Переменные, типы данных, преобразование типов
3.3 Логические операторы (if, if-else), тернарный оператор
3.4 Циклы for, while, do-while, break, continue
3.5 Конструкция switch-case
3.6  Массив, цикл foreach
3.7 Список (List) - System.Collection.Generic, перечисления
3.8 Словарь (Dictionary) System.Collection.Generic
3.9 Функции, параметры, перегрузка функций, ключевое слово return


1.2 Почему именно С#?

Курс построен на изучении языка C#. Из всех Си-подобных языков этот - наиболее дружелюбный и простой для новичков. C# является востребованным на данный момент в IT-области на рынке России, имеет мощный инструментарий для разных задач программирования. Факты, подтверждающие мысль о том, что С# - это круто:
На данный момент 94% всех пользователей десктопных устройств пользуются операционной системой Windows. Язык С# полностью специализируется на продуктах для этой операционной системы: от веб-серверов до управления реляционными базами данных.
>>C# обладает строгой типизацией, что приводит к меньшему числу ошибок при разработке приложений, имеет высокую скорость работы в сравнении с языками обладающими динамической типизацией.
>>C# - это высокоуровневый объектно-ориентированный язык программирования.
>>C# обладает очень мощной библиотекой ML.net для разработки нейронных сетей.
>>C# на данный момент лидирующий язык программирования для разработки игр на операционную систему Windows со своим движком Unity.
>>С недавних лет главная оболочка C# - .NET Framework объединился с кроссплатформенным вариантом .NET CORE, что позволяет разрабатывать на C# кроссплатформенные приложения для разных операционных систем.
У C# есть и минус, о котором стоит сказать - это уязвимость приложений C# (есть средства для лёгкой декомпиляции кода, что грозит распространению вашего проекта без вашего ведома).
Факты:
C# - объектно-ориентированный язык
C# - это язык программирования для разных операционных систем.
С# - это язык со строгой типизацией.
Точкой входа в программу является функция Main
Функция начинает свою работу после вызова с определёнными параметрами (или без них)
В программе обязательно должна быть функция Main
Парадигмы ООП - это Инкапсуляция, Наследование, Полиморфизм.

3.1 О.NET Framework, жизненный цил кода C#

Прежде, чем начать изучение синтаксиса и работы кода на языке C#, необходимо познакомиться с .NET Framework.
>> .NET Framework - это программная платформа от Microsoft, которая предназначена для разработки приложений как для операционных систем, так и интернет-приложений для Web. Она включает в себя огромное количество библиотек классов для созданий объектов. Понятия объекта и класса подробно обсудим в следующем модуле, а сейчас просто скажем, что класс - это описание объектов, их свойств и методов (операций над объектами), а объект  - экземпляр класса, обладающий свойствами этого класса, над которым можно совершать определенные операции (эти операции являются методами класса).
>> .NET Framework - позволяет разрабатывать приложения для разных операционных систем. Основной является Windows. Вариация Framework Mono позволяет разрабатывать приложения для Linux и MacOS. Существует .NET Framework Compact, которая позволяет разрабатывать приложения для встроенных систем (роботы, терминалы, смартфоны). С недавних пор .NET Framework объединён с .NET Core.
>> .NET Framework - обладает совместимостью с любым .NET языком. Как пример, у вас может быть описан класс на языке C#, который унаследован от Visual Basic, а обработку исключений, вызванных кодом на C# , описать на языке Delphi.
>> Внутри .NET Framework находится CLR (Common Language Runtime) - общеязыковая исполняющая среда, которая отвечает за обслуживание процесса выполнения всех приложений, которые написаны  с помощью библиотеки .NET.
Допустим, мы написали текст программного кода на языке C#. Чтобы программа заработала, в среде разработки IDE (Integrated development environment) необходимо выполнить несколько этапов:

Компиляция (csc.exe). В .Net она происходит в два этапа. Чтобы обеспечить совместимость .NET языков между собой, происходит компиляция (трансляция или перевод) кода в промежуточный MSIL-код (Microsoft Intermediate Language - промежуточный язык Microsoft). В сборку MSIL-кода включаются вся мета-информация и все файлы ресурсов проекта.
JIT-компиляция (Just in time compiler) - переводит полученный MSIL-код в родной код, отвечающий требованиям операционной системы и архитектуре компьютера. 
После компиляции получается объектный код, который компонуется в исполняемый файл приложения (обычно с расширением .exe). Этот процесс называется сборкой. В среде разработки процесс сборки запускается кнопкой запуска.

Как говорилось ранее, С# - это мощный объектно-ориентированный язык, который позволяет разрабатывать как десктоп-приложения, так и приложения для Web. Язык С# применяется на следующих платформах для разработки приложений:

Для Windows: Windows Forms (платформа для создания приложений-форм с помощью визуального конструктора), Windows Presentation Foundation (платформа для создания пользовательских интерфейсов с широкими возможностями), XNA Game Studio (платформа для разработки игр для Windows, Xbox, Windows Phone).
Для Web: ASP.Net Web Forms, ASP.NET MVC, Silverlight, Windows Phone (Silverlight).
Для работы с базами данных в C# с помощью ADO.NET, либо с помощью интегрированного языка запросов LINQ.

*/
